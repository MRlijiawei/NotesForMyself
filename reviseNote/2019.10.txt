1.html srcipt的延迟加载
立即下载，但延迟执行
eg：在head中即可引入js，但是会在执行到</html>时才执行
<script type="text/javascript" defer="defer" src="..."></script>

在xhtml中，要把defer设置为defer="defer"
可能有兼容性问题，因而还是放在最后比较保险

2.类似defer，有异步脚本
async
因为是异步加载，因而很可能会有dom还没加载完就执行到js脚本的情况，因而异步js最好不要在加载期间修改dom。异步脚本一定会在页面的load事件之前执行，但可能会在DOMContentLoaded时间之前或之后执行

3.文档模式
doctype文档类型
混杂模式（quirks mode）和标准模式（standards mode）

4.noscript元素标签
浏览器不支持脚本或脚本被禁用时显示

5.5种基本数据类型
Undefined、Null、Boolean、Number、String
复杂数据类型――Object

6.typeof返回的类型
undefined、boolean、string、object、function、number
typeof是操作符而不是函数

null == undefined//true

Object(1)
 //Numbe{1}

7.科学计数法e
3.142e7 = 3.142*10的7次方
Infinity无穷和isFinite()函数（在最大最小值中间则返回true）
Number.MAX_VALUE等

8.NaN
NaN == NaN// false
isNaN('10')// false
isNaN('sss')// true
isNaN(true) // false（true==1）


9.&times;
和&nbsp;同理，‘&nbsp;’是空格，‘&times;’是x。
在页面渲染时，&timestamp=会被转义为xtamp=，如：
$('body').append('<span>www.aa.com?data={{data}}&timestamp={{timestamp}}</span>')
而$('body').append('www.aa.com?data={{data}}&timestamp={{timestamp}}')是不会被转义的。
解决办法：
$('#widget_my_zzk span').eq(0).text('www.aa.com?data={{data}}&timestamp={{timestamp}}')
使用text()。注eq()的用法。

10.flex布局回顾总结
10.1 flex布局简介：
	flex是flexible box（弹性盒子）的缩写，故flex布局也被叫作“弹性布局”。
任何一个容器都可以指定为flex布局display:flex;；行内元素也可以使用flex布局display:inline-flex;；webkit内核的浏览器需加上-webkit  display:-webkit-flex;。
设置为flex布局后，子元素的float、clear、vertical-align属性失效，此时使用justify-content、align-items来设置对齐方式。
10.2 概念：
	flex布局的元素被称为flex容器，子元素被称为容器的flex项目；容器默认水平（main）和垂直（cross）两个坐标轴；项目默认沿main轴排列，其单个项目占据的空间叫作main size和cross size。
10.3 属性：
	flex-direction，flex-wrap，flex-flow，justify-content，align-items，align-content共6个属性
flex-direction：顾名思义，布局的方向，其值有row | row-reverse |  column | column-reverse，顾名思义，效果就是横排、横排倒序、竖排、竖排倒序，默认row；
flex-wrap：顾名思义，布局超出设置，其值有nowrap | wrap | wrap-reverse，分别是不换行，换行，换行倒序，不换行就是直接压缩排布不换行，后两者是换行，区别是wrap换行后新行在下边，后者相反，默认nowrap；
flex-flow：是前边两个属性的缩写，是其合在一起的写法，比如：flex-flow: column-reverse nowrap;；
justify-content：内容项目的对齐方式，且是在main轴（横向）对齐方式，其值有flex-start | flex-end | center | space-between |space-around五个，效果分别是左对齐，右对齐，居中，两端对齐（中间等距），每个项目（子元素）间隔相等对齐，后3个属性都是居中，有一定类似，差别在于，center仅居中，不会计算除了两边之外的距离，space-between则是先帖这两边，剩余空间等距分割，space-around则是将两边纳入距离分割，但是由于中间部分是两个距离连在一起的，所以比两边的距离大一倍；
align-items：和前边一个属性类似，这个属性是设置纵向对齐方式，其值有flex-start | flex-end | center |baseline | stretch一样是5个，前3个同理是顶部和底部和居中对齐，baseline是以项目的第一行文字的基线对齐（靠底部对齐），stretch则是纵向拉伸占满（项目不设置高度或设为auto）（设置高度则是顶部对齐！）；
align-content：多根轴线对齐，有flex-start | flex-end | center | spance-between | space-around |stretch 6个值，分别是顶部对齐、底部对齐、上下居中、上下贴边等距、上下等距、上下贴边拉伸。默认第6个；
align-content:center对单行是没有效果的,而align-items:center不管是对单行还是多行都有效果,而在我们日常开发中用的比较多的就是align-items。align-content会对同行设置默认等高。center时可以理解为，align-content是将全部子元素看出一个元素块来处理的，因为align-content可以看到两行是上下贴在一起的，而align-items是上下等距分割的，其他值也稍有差异
以上是flex容器的属性，以下是内部项目的属性：
order：顾名思义，顺序的意思，其值是任意整数integer（可以为负）；默认0；
flex-grow：（相对）放大比例，默认0，其值是任意非负整数number；
flex-shrink：缩小比例，默认1，等比例缩小。其值同上，如果设置为0，则不会被缩小；
flex-basis：意为固定宽度（main size），默认auto（自动缩放），如果设置为固定的长度如200px，则不会被缩放；
flex：flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。其有两个快捷值，auto（1 1 auto）和none（0 0 auto）；建议优先使用这个属性
align-self：自身对齐方式，用于覆盖容器（父元素）的align-items属性，默认auto（auto意为继承父元素的align-items属性，如果没有父元素，则效果同stretch拉伸），其值有auto | flex-start | flex-end | center | baseline | stretch比align-items多了个auto(继承父元素，其实还是相当于没有auto的另外5个属性)；
示例见demos\files\flex布局示例