1.谈谈你对MVVM开发模式的理解

2. Vue 有哪些指令？
v-html、v-show、v-if、v-for等等

3. v-if 和 v-show 有什么区别

4. 简述Vue的响应式原理
当一个Vue实例创建时，vue会遍历data选项的属性，用 Object.defineProperty 将它们转为getter/setter并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的watcher程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。

5. Vue中如何在组件内部实现一个双向数据绑定（组件通信）
具体思路：父组件通过props传值给子组件，子组件通过 $emit 来通知父组件修改相应的props值

!!!6.@input是什么，参数传入吗？暂未找到资料

7.Vue中如何监控某个属性值的变化（或监听对象的某个属性）
watch: {
      obj: {
      handler (newValue, oldValue) {
        console.log('obj changed')
      },
      deep: true（deep属性表示深层遍历，但是这么写会监控obj的所有属性变化）
    }
  }

watch: {
   
'obj.a': {
      handler (newName, oldName) {
        console.log('obj.a changed')
      }
   }
  }
或使用computed计算属性来实现类似把对象属性单独作为变量进行监听的效果，然后监听a1即可
computed: {
    a1 () {
      return this.obj.a
    }
}

7.Vue中给data中的对象属性添加一个新的属性时会发生什么，如何解决
现象：可以成功添加，但是视图并没有刷新。原因是Vue在实例创建时，并没有该属性。
解决：使用$set()
// this.obj.b = 'obj.b'  
this.$set(this.obj, 'b', 'obj.b')
console.log(this.obj)

8.delete和Vue.delete删除数组的区别
var a = [1,2,3,4]
delete a[1]//1,empty,3,4
this.$delete(a, 1)//1,3,4

9.如何优化SPA应用的首屏加载速度慢的问题？

(1)将公用的JS库通过script标签外部引入，减小 app.bundel 的大小，让浏览器并行下载资源文件，提高下载速度；
(2)在配置 路由时，页面和组件使用懒加载的方式引入，进一步缩小 app.bundel 的体积，在调用某个组件时再加载对应的js文件；
(3)加一个首屏loading图，提升用户体验；

10. 前端如何优化网站性能
(1)减少 HTTP 请求数量――CSS Sprites国内俗称CSS精灵，合并 CSS 和 JS 文件，采用 lazyLoad
（2）控制资源文件加载优先级――一般情况下都是CSS在头部，JS在底部
（3）利用浏览器缓存
（4）减少重排（Reflow）――减少Reflow，如果需要在DOM操作时添加样式，尽量使用 增加class属性，而不是通过style操作样式
（5）减少 DOM 操作
（6）图标使用 IconFont 替换

11.网页从输入网址到渲染完成经历了哪些过程
（1）输入网址；
（2）发送到DNS服务器，并获取域名对应的web服务器对应的ip地址；
（3）与web服务器建立TCP连接；
（4）浏览器向web服务器发送http请求；
（5）web服务器响应请求，并返回指定url的数据（或错误信息，或重定向的新的url地址）；
（6）浏览器下载web服务器返回的数据及解析html源文件；
（7）生成DOM树，解析css和js，渲染页面，直至显示完成

12.jQuery获取的dom对象和原生的dom对象有何区别
一个是对象，一个是对象数组
转换：$(原生),jQuery对象[0]

13.jQuery如何扩展自定义方法
(jQuery.fn.myMethod=function () {
       alert('myMethod');
})
或
(function ($) {
        $.fn.extend({
             myMethod : function () {
                  alert('myMethod');
             }
        })
})(jQuery)

14.el下拉菜单dropdown
<el-dropdown  @command="点击事件">
	《要绑定下拉的元素》
	<el-dropdown-menu slot="dropdown">
		<el-dropdown-item>

15.css兼容性
CSS hack主要有三种：IE条件注释法、CSS属性前缀法、选择器前缀法
（1）<!--  lt是小于 gt是大于 lte是小于等于 gte是不小于 !是不等于 -->
<!-- [if IE]>
   你想要执行的代码 
<![endif]-->
（2）可以先使用“\9"标记，将IE分离出来，再用”*"分离出IE6/IE7，最后可以用“_”分离出IE6

.type{
        color: #111; /* all */

        color: #222\9; /* IE */
        *color: #333; /* IE6/IE7 */
        _color: #444; /* IE6 */
        }

所以可以按着优先级就能给特定的版本捎上特定颜色
（3）IE6可识别 *div{color:red;}  
IE7可识别 *+div{color:red;}
一些常见例子：
（1）最主要也是最常见的，就是浏览器对标签的默认支持不同，所以我们要统一，就要进行CSS reset . 最简单的初始化方法是 *{margin:0; padding:0;} 但不推荐，而且它也并不完善
（2）IE6双边距bug: 块属性标签添加了浮动float之后，若在浮动方向上也有margin值，则margin值会加倍。其实这种问题主要就是会把某些元素挤到了第二行
解决的方式有两个：
1.给float元素添加display：inline 即可正常显示
2.就是hack处理了，对IE6进行 _margin-left:5px;
（3）有些浏览器解析img标签也有不同，img是行内的，一般都会紧接着排放，但是在有些情况下还是会突然出现个间距，解决办法是给它来个浮动  float 
（4）超链接的样式a:link{}  a:visited{}  a:hover{}  a:active{}
（5）chrome下默认会将小于12px的文本强制按照12px来解析。解决办法是给其添加属性：
-webkit-text-size-adjust: none;
（6）鼠标的手势也有问题：FireFox的cursor属性不支持hand，但是支持pointer，IE两个都支持；所以为了兼容都用pointer
（7）消除ul、ol等列表的缩进时，样式应写成:list-style:none;margin:0px;padding:0px; 其中margin属性对IE有效，padding属性对FireFox有效
（8）CSS控制透明度问题：一般就直接 opacity: 0.6 ; IE就 filter: alpha(opacity=60)
但在IE6下又有问题，所以又得弄成 filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60);
（9）IE6下div高度无法小于10px 
解决的办法有两种：添加overflow属性或设置fontsize大小为高度大小


16.函数声明和函数表达式
// 函数声明
	//funDeclaration("Declaration");//=> 可执行
    function funDeclaration(type){}
// 函数表达式
	//funExpression("Expression");//报错
    var funExpression = function(type){}
差别：函数表达式类似于先定义，若还未定义则是undefined；而函数声明则相当于声明后可直接调用

17.bind，apply，call

18.requirejs与seajs的比较

19.闭包

20.动画和canvas