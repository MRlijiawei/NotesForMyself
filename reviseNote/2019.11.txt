1.Number类型
8进制
0开头，如var octNum = 070
16进制
0x开头，如var hexNum = 0xA//不区分大小写
Number()
parseInt('aa123')//NaN
parseInt('123aa')//123
parseInt('AF', 16)//175
parseFloat只解析10进制，没有第二个参数
（Object.valueOf???）

2.String
2.1字符字面量（转义字符）
\n换行，\t制表，\b空格，\r回车，\f进纸，\\斜杠，\'\"单双引号，\xnn十六进制nn表示的字符，\unnn十六进制nnn表示的Unicode字符
2.2转化为字符串的方法：toString（），String（），+""
注意：toString可以有一个参数，表示进制数，如10.toString(2)//"1010"
此外，null和undefined是不支持toString的，但是可以String(null)//"null"
此外，对象转化为string要用JSON.stringify，直接toString会"[object Object]"

3.Object
3.1属性方法：
constructor//Object()
hasOwnProperty(xxx)//是否存在该属性
isPrototypeOf(xx)//是否是另一个对象的原型
propertyIsEnumerable(xxx)//属性是否能用for-in枚举

toLocalString()//
toString()
valueOf()

4.运算符
4.1一元运算符（+xx，-xx）
var o = {
	valueOf: function() { return -1 }
}
o=+o//-1

var b = 'a'
b=+b//NaN
'a' =+'a'//会报错
4.2位操作符
32位，第一位0正1负，其余31位表示值，二进制，负数等于正数的反码+1。
~（非）,&（与），|（或），^（异或）此外，<<左移（右补0），>>有符号的右移（保留符号位），>>>无符号右移
4.3布尔操作符
!,&&,||
4.4运算
+-*/%（求模，取余）
4.5关系操作符
>，<，>=，<=，==，!=，===，!==
4.6条件操作符
xxx ? xxx : xxx
4.7赋值操作符
=，+=，-=，*=，/=，%=，<<=，>>=，>>>=
4.8逗号运算符
var num1 = 1, num2 = 2;
var num = (1,2,3,4) //4

5.语句
if-else，do-while（先执行循环体，再判断条件），while（先判断再执行循环体），for（类同while），for-in（精准迭代语句，用来枚举对象的属性，下例），label语句（？？？），break和continue，width语句（将代码作用域设置到同一个特定对象，下例）,switch语句
var propName
for（//（推荐这里用var）var propName in window）{document.write(propName)}

var qs = location.search.substring(1)
var hostName = location.hostName
可以写成
with(location){
	var qs = search.substring(1)
	var hostName = hostName
}

扩展：无限循环的一种写法：
for(;;) { doSomething() }

6.函数
6.1参数
注：arguments对象，参数，是个类似数组的结构但不是真正意义的数组，如：
function sayHi(xxx//(参数非必须)) {alert(arguments[0]+','+arguments[1]+arguments.length)}
6.2没有重载
即，同名函数以后来定义者为最终

7.变量、作用域、内存
7.1基本类型和引用类型（保存在内存中的对象）
动态属性，复制变量值（引用类型的指针复制和浅copy），传递参数（参数是函数的局部变量，下例。局部变量在函数执行完后销毁）

例：基本类型和引用类型的参数传递。函数定义省略
var count = 20
var result = addTen(count)//count还是20

var person = new Object()
setName(person)//person.name有了值
另外：
function setName(obj) {
	obj.name = '1'
	obj = new Object()
	obj.name = '2'
}
setName(person)//此时person.name 是‘1’，因为2是局部的

检测类型：
typeof可判断基本类型；instanceof（person instanceof Object）。扩展方法：Object.prototype.toString.call(xx).substr...，给判断对象添加上[object，因而截取后边的即可。

另外，apply和call的异同，两种都是实现继承用的，区别是apply只有2个参数，call可以多个

7.2
延长作用域：try catch的catch语句块，with语句块；
没有块级作用域：if，for循环
作用域查询

7.3内存管理，内存泄露
内存回收机制，垃圾收集，执行到分配内存，执行完回收内存，定时周期性回收
策略：标记清除，引用计数（循环和互相引用会导致内存无法释放导致泄露，可将引用置null断开连接），性能问题（。。。），手动回收（window.xxxcollect...()）
内存管理（解除引用：不用的数据置null，方便下次回收）


8.引用数据类型
定义方法：构造函数法（=new Array()），字面量法（={xx:xx}）
对象属性访问方法：点访问（xxx.xxx），方括号（xxx[yyy]，yyy可以是变量，可以是非正常字符如'first name'）
8.1Array
①
new Array(1,2,3)
length属性是可操作的，非只读，因而可以修改length来实现末尾增减！（如colors[colors.length]=xx来给末尾添加）
②
检测数组：xxx instanceof Array，es5加了Array.isArray()
③
转换方法：toString(),toLocaleString(),valueOf(),前两者是分别对数组元素执行toString()和toLocaleString()后再xxx，理论上两者是相同的结果，但如果将两个方法重写为不同则结果可能会不同。另外，还有join()方法转换为字符。注意如果有null或undefined元素，转换为字符后是空字符串
④
栈方法：后入先出
push（（可一次多个）返回数组最终长度）和pop（返回末尾被移出的项）方法
⑤
队列方法：先进先出
shift(移除数组第一项，返回该项)，unshift(从数组前端插入（可一次多个）并返回数组最终长度)
⑥
重排序方法
.reverse()(反转),.sort()（排序（注意是相当于先转成字符串再按字符串大小升序排序，因而‘2’>‘10’））
因而sort方法可以接收一个参数来指定哪个位于哪个前边
xxx.sort(function(a,b){return a-b//降序})
⑦
操作方法：
concat()（末尾添加，可多个，若不是数组则作为单项数组处理，不影响原数组）
slice()截取两个参数作为起止点之间的元素（包含起点元素，不包含结尾元素。若只有起点，则截取到结尾）生成新数组，不影响原数组
splice()任意指定位置删除或插入或替换任意元素（参数分别是目标位置的index、删除长度（将删除长度设置为0则可实现插入）、第二个参数为0时要插入的元素，可以多个，而如果第二个参数是1，则表示替换）
⑧
位置方法
返回查找元素的位置。可接收两个参数，第一个是要查找的元素，第二个是查找的起点下标
indexOf()
lastIndexOf()
区别：前者是从头往后找，后者是从后往前找
⑨
迭代方法（遍历）
every()数组的每一项都满足
filter()数组中满足的项
forEach()遍历，没有返回
map()遍历，返回每一项return的元素组成的数组
some()数组中存在满足的
它们的参数（参数是一个方法）方法的参数有3个，分别是当前元素、当前下标index、数组本身
⑩
缩小方法
reduce和reduceRight
类似9，也是对元素进行遍历，且前者是从前往后，后者是从后往前
不同的是，其参数方法的参数有4个，分别是前一个值、当前值、index、数组。其中前1个值是函数return的值（第一次则是第一项）。其应用就是数组求和：
xxx.reduce(function(a,b,c,d){return a+b})

8.2Date
1970年1月1日凌晨后的毫秒数
①
Date.parse()和Date.UTC()
都是将时间格式转换为毫秒
不同：参数的形式不同，Date.parse()接收的是日期时间的字符串（如2/2/2019,2019-02-02T02:02:02）
而Date.UTC()接收的参数是多个，分别是年、月（从0开始计的，比如10月就是9）、日、时、分、秒
如new Date(Date.UTC(2019,1,2,2,2,2))
而Date()构造函数本身是模仿UTC的，所以可以new Date(2019,1,2,2,2,2)

转化为毫秒的另一种方法：使用+，例如：var start = +new Date()
Date.now()
②
继承的方法
Date类型也重写了toLocaleString、toString、valueOf方法。具体差异和浏览器有关。而Date类型的valueOf返回的是毫秒数，因而可以直接用Date类型的数据进行大小比较，实则比较的是毫秒数的大小。
③
日期格式化方法
toDateString()
toTimeString()
toLocaleDateString()
toLocalTimeString()
toUTCString()（等价于toGMTString，gmt是旧版本兼容）
④
日期、时间组件方法
getTime()返回毫秒数，与valueOf()返回的值相同
setTime(毫秒)
getFullYear、getUTCFullYear、getMonth、getUTCMonth、getDate、getUTCDate、getDay、getUTCDay、getHours、getUTCHours、setHours、setUTCHours、getMinutes、getUTCMinutes、setMinutes、setUTCMinutes、getSeconds、getUTCSeconds、setSeconds、setUTCSeconds、getMilliseconds、getUTCMilliseconds、setMilliseconds、setUTCMilliseconds、setTimezoneOffset（本地时间与UTC时间相差的分钟数。夏令时？？）

8.3RegExp
正则，/pattern/flags或new RegExp（pattern， flags）。flags可多个，可选：g（全局），i（不区分大小写），m（多行模式），如：/.at/gi。
两种写法的差别：字面量写法始终会共享同一个RegExp实例，而构造函数法创建的每一个都是新实例。（？？）
①属性
global，ignoreCase，multiline（分别对应上边的flags的3种），lastIndex（开始搜索的位置下标），source（字符串表示）
②方法
exec()返回一个数组，数组本身有input、index等属性
test()
此外还有toLocaleString,toString,valueOf方法
③构造函数属性
RegExp本身构造了一些属性，如input、lastMatch、lastParen、multiline、leftContext、rightContext。其中有一些浏览器兼容性支持问题。他们等价于$_,$&,$+,$*,$`,$'。此外还有$1-9来存储前9个匹配项

8.4Function
构造函数法（函数声明），表达式法。
函数都是一Function类型的对象实例，函数名相当于是指向这个对象的指针。
两种定义方法的区别：解析器在执行代码的时候，会优先执行函数声明，因而不管函数声明和调用的先后顺序是怎样的都不会出错；而表达式法则是会按顺序执行，因而调用必须在命名的后边才不会出错。

①函数内部属性
arguments和this。而arguments还有一个callee属性，是一个指向这个函数本身。
如：function factorical(num) {
	if (num <=1) {
		return 1
	} else {
		return num * arguments.callee(num - 1)
		//return num * factorical(num - 1)一般使用上边写法，消除紧密耦合，且在将方法赋值给别的变量时不需要再关心原方法名
	}
}
caller，即调用者，可结合callee使用，如arguments.callee.caller,即函数本身的调用者

②函数属性和方法
属性：length和prototype
length表示方法的参数的个数，prototype则是方法的原型
方法：apply(),call()（bind()）
以上两个方法用于在特定作用域中调用函数，等于设置函数体内this对象的值（闭包）
apply有两个参数，一个是作用域，一个是参数数组。例：
function getMax(num1,num2){
	return Math.max.apply(this, arguments//或[num1, num2])
}
而call的作用和apply相同，只是参数的形式不同，call的参数需要列举出来，以上例子改成call就是
return Math.max.call(this, num1, num2)
使用举例：
window.color = '1'
var o = {color: '2'}
function sayColor(){
	return this.color
}
sayColor()//1//sayColor.call(this)、sayColor.call(window)//1
sayColor.call(o)//2
此外,ES5新增了bind，用于将this绑定到指定对象。如上边的例子：sayColor.bind(o)()
bind与前边两者的不同主要是前两者相当于应用了作用域后直接执行，而bind是绑定，相当于返回的是绑定后的方法，要得到结果需要手动执行（括号()）。且bind只有一个有效参数

8.5基本包装类型
Number，Boolean，String。
基本数据类型不是对象，理论上不应该有方法，如字符串的substring()方法。有方法的实际原理是
首先调用new String()创建了一个实例，然后调用substring方法，然后销毁实例。以下例子便于理解：
var value = '2'
var num = Number(value)//这里Number是转型函数
var num1 = new Number(value)//这里Number是构造函数
alert(typeof num)//number
alert(typeof num1)//object
这三种包装类型的toLocaleString、toString、valueOf均被重写，暂不赘述。

此外，Number类型有一些常用方法，如toFixed，toExponential（转为科学计数法），此外还有toPrecision（有一个参数，表示返回的结果的位数，其结果形式由原数据和该位数决定是否是科学计数法以及是否有小数点等）
String有一些方法和属性：length属性，方法：charAt，charCodeAt。此外，可以使用下标的方式访问第几位的元素，效果同charAt，如var a = ‘123’，a[1]。
String的操作方法：concat字符串拼接，slice、substring（这两个的参数是起止位置下标），substr（参数是起始位置和长度）
以上3个截取方法的参数如果有负数，会有不同的表现，有的转化为正数，有的转化为0（？？使用时再分析，不推荐使用）
String的位置方法indexOf、lastIndexOf，同前，参数有两个，一个是要查找的元素，一个是起始点的下标.
此外还有trim(),toUpperCase(),toLowerCase(),toLocaleLowerCase(),toLocalUpperCase()

String的查找匹配方法：
match()方法，实质上和RegExp的exec()方法相同，
类似的还有search()，类似charAt，而参数和match的相同是正则，
此外还有replace()，第一个参数是正则，第二个是要替换的字符，也可以是一个函数，有3个参数。
还有split方法，有两个参数，一个是分割字符，一个是返回数组的长度指定
最后一个是localeCompare，用以比较两个字符在字母表的排序，括号里的那个参数在前则为1，在后则为-1，相等为0，如：'yello'.localeCompare('red')//1

formCharCode()方法：构造函数本身的静态方法，与charCodeAt相逆。如String.formCharCode(104, 101, 108)//'hel'

此外，还有一些构造html标签的方法，有anchor(name)，big，bld，fixed等等，但不推荐使用

8.6单体内置对象
Object、Array、String等都是内置对象，此外还有两个单体内置对象Global和Math
①Global对象
URI编码：encodeURI和encodeURIComponent，两者的区别是前者不会对某些特殊字符如冒号正斜杠等进行编码，而后者是对url的一部分进行编码因而会全部编码；
与他们对应的是decodeURI和decodeURIComponent解码。

eval()方法：执行，解析器。参数是js代码段。效果是执行该段代码，等同于直接执行。严格模式不可以
Global对象的属性，其实就是那些构造函数。
window对象

②Math对象
属性：E,LN10,LN2,LOG2E,LOG10E,PI,SQRT1_2,SQRT2
方法：min(),max()
	舍入方法：ceil（向上舍入），floor（向下舍入），round（四舍五入）
	随机方法random()0-1不包括两端的随机数，常用：Math.floor(Math.random * m + n)//m~m+n
	其他方法：abs,exp,log,pow,sqrt,三角函数等

9.面向对象
9.1对象属性
①数据属性
数据属性的4个特性：[[Configurable]](是否能通过delete删除，是否能修改特性),[[Enumerable]](是否可以for-in)，[[Writable]](是否可写，即是否可以修改属性的值),[[Value]]。
前3者都默认true，如果要修改这4个特性，需要使用Object.defineProperty()，3个参数，分别是目标对象、属性名字，描述符对象（范围以上4种），如：
var person = {}
Object.defineProperty(person, 'name', {
	writable: false,
	value: 'static name'
})
这样person的name属性就变成只读的，不能修改。此外，如果设置configuration为不可配置的，则再次设置修改该特性会报错。

②访问器属性（在数据属性的基础上有get和set？？）
[[Configurable]],[[Enumerable]],[[Get]],[[Set]]
同样，要使用Object.defineProperty()来定义，如：
var book = {
	_year: 2018,
	edition: 1
}
Object.defineProperty(book, 'year', {
	get: function(){ return this._year },
	set: function(newYear) {
		if (newYear > 2018) {
			this._year = newYear
			this.edition += newYear - 2018
		}
	}
})
book.year = 2019
alert(book.edition)//2
如果不同时指定getter和setter，则没有指定get或set就不能读或写。
而后有两个非标准方法：__defineGetter__(),__defineSetter__()
使用这两个方法，上边例子可以改为：
book.__defineGetter__('year', function(){return this._year})
set同上

为方便定义多个属性，有Object.defineProperties方法(两个参数)，如：
var book = {}
Object.defineProperties(book,{
	_year: {
		value: 2018
	},
	edition: {
		value: 1
	},
	year: {
		get: xxx,
		set: xxx
	}
})

③读取属性特性
Object.getOwnPropertyDescriptor()，参数有两个，一个是对象，一个是要读取的属性，返回的是一个对象，包含以上2种八个属性。可以对任何对象包括BOM、DOM对象进行使用。

9.2创建对象的模式
①工厂模式，解决创建多个相似对象的问题，但解决不了对象识别。使用函数构造对象（{new Object()...}）
②构造函数模式，也是一个函数，但是首字母大写，使用时和Object等相同，需要new。而构造的实例化的对象的constructor就是该构造函数({this.xxx=xxx;xxx})。而使用instanceof验证，实例对象即是构造函数的实例，也是Object的实例，构造函数继承自Object。而构造函数也能当做普通函数使用。而由于每个属性和方法都是实例化的，因而占用的内存也是不同的，不同实例对象其内部的方法也是不相等的。优化的写法可以把其内部的方法抽出来单独定义（如this.sayName = sayName,sayName在外部定义）。
③原型模式(prototype)，类似构造函数模式，且可以实现属性方法共享。如：
function Person(){}
Person.prototype.name = '1'//'1'是共享的，都可以访问到的